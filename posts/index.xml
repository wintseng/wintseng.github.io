<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on wintseng</title>
        <link>/posts/</link>
        <description>Recent content in Posts on wintseng</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-tw</language>
        <lastBuildDate>Fri, 11 Dec 2020 18:22:38 +0800</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>由 wordpress 轉移到 Blogger</title>
            <link>/posts/2020/12/%E7%94%B1-wordpress-%E8%BD%89%E7%A7%BB%E5%88%B0-blogger/</link>
            <pubDate>Fri, 11 Dec 2020 18:22:38 +0800</pubDate>
            
            <guid>/posts/2020/12/%E7%94%B1-wordpress-%E8%BD%89%E7%A7%BB%E5%88%B0-blogger/</guid>
            <description>重點說明：    Blogger 沒有實體資料夾，所以原來 wordpress 上的 Post 和 Page 所使用到的附夾檔(attachment)和照片都還在原來的主機上。轉移過來的只有 Post 文和 Page 頁面。 （所以原來的主機不能關機，除非再以人工將附檔(或照片)一一下載並在 Blogger 上修改所有相關 PO 文重新插入夾檔(或照片）
  往後在 Blogger 上的 PO 文，當然可以直接上傳檔案挿入，但這佔用管理者 Google 帳號的 Google 相簿空間，免費空間似乎只有 15GB（待查證）,對於常需要夾檔的人來說可能有些
  由 wordpress 匯出的 xml 無法直接匯入 Blogger, 需經過轉換為 Blogger 格式，所幸網路上就有這樣的服務。這裡就是一個 https://scratchtheweb.com/tools/wordpress-to-blogger-converter/
  匯入 Blogger 的動作看似沒有結果，其實是需要等待幾分鐘至數十分鐘，再回來網站看。
   以下是匯入 Blogger 後的範例    https://pe-ymjhs.blogspot.com
  https://asobikodomo.blogspot.com
   所以，步驟就是：    由 Wordpress 後台匯出“全部”（含貼文、頁面和媒體）</description>
            <content type="html"><![CDATA[<h2 id="重點說明">重點說明：</h2>
<hr>
<ol>
<li>
<p>Blogger 沒有實體資料夾，所以原來 wordpress 上的 Post 和 Page 所使用到的附夾檔(attachment)和照片都還在原來的主機上。轉移過來的只有 Post 文和 Page 頁面。 （所以原來的主機不能關機，除非再以人工將附檔(或照片)一一下載並在 Blogger 上修改所有相關 PO 文重新插入夾檔(或照片）</p>
</li>
<li>
<p>往後在 Blogger 上的 PO 文，當然可以直接上傳檔案挿入，但這佔用管理者 Google 帳號的 Google 相簿空間，免費空間似乎只有 15GB（待查證）,對於常需要夾檔的人來說可能有些</p>
</li>
<li>
<p>由 wordpress 匯出的 xml 無法直接匯入 Blogger, 需經過轉換為 Blogger 格式，所幸網路上就有這樣的服務。這裡就是一個 <a href="https://scratchtheweb.com/tools/wordpress-to-blogger-converter/">https://scratchtheweb.com/tools/wordpress-to-blogger-converter/</a></p>
</li>
<li>
<p>匯入 Blogger 的動作看似沒有結果，其實是需要等待幾分鐘至數十分鐘，再回來網站看。</p>
</li>
</ol>
<hr>
<h2 id="以下是匯入-blogger-後的範例">以下是匯入 Blogger 後的範例</h2>
<hr>
<ol>
<li>
<p><a href="https://pe-ymjhs.blogspot.com">https://pe-ymjhs.blogspot.com</a></p>
</li>
<li>
<p><a href="https://asobikodomo.blogspot.com">https://asobikodomo.blogspot.com</a></p>
</li>
</ol>
<hr>
<h2 id="所以步驟就是">所以，步驟就是：</h2>
<hr>
<ol>
<li>
<p>由 Wordpress 後台匯出“全部”（含貼文、頁面和媒體）</p>
</li>
<li>
<p>轉檔。將 Wordpress 匯出的 xml 檔轉換成 Blogger 匯入格式的 xml</p>
</li>
<li>
<p>匯入 Blogger</p>
</li>
<li>
<p>接下來就是在 Blogger 上面的操作了，選擇主題、修改版面配置等等。</p>
</li>
</ol>
<hr>
<h2 id="後記">後記：</h2>
<hr>
<p>如果是由 wordpress 匯出到另一個 wordpress 就可以更完整的轉移平台了。在匯入新 wordpress 的時候保持原來的舊站在線上，匯入程式會一併將所有附檔與照片（媒體）拉到新平台的相同資料夾。而且，轉移之後可以將舊站關機，所有PO文的附檔與照片都可以正確連結到。
<img src="https://s.w.org/style/images/about/WordPress-logotype-standard-white.png" alt="Wordpress LOGO"></p>
]]></content>
        </item>
        
        <item>
            <title>symfony project 安裝於 sqlite3 改為 mysqli </title>
            <link>/posts/2020/03/symfony-project-%E5%AE%89%E8%A3%9D%E6%96%BC-sqlite3-%E6%94%B9%E7%82%BA-mysqli/</link>
            <pubDate>Wed, 25 Mar 2020 21:54:50 +0800</pubDate>
            
            <guid>/posts/2020/03/symfony-project-%E5%AE%89%E8%A3%9D%E6%96%BC-sqlite3-%E6%94%B9%E7%82%BA-mysqli/</guid>
            <description>有時候初始安裝 symfony 時採用 sqlite3, 後來移植等原因需改採 mysql server 時，先改設定檔，然後 php/bin/console doctrine:database:create 在 mysql server 上建立新的資料庫。
刪除 src/Migrations 下的所有先前產生的 migration 檔案，再重新 phpbin/console make:migrate 產生供 mysql 語法的 migrations, 再寫入資料 php bin/console doctrine:migrations:migrate 即可。  </description>
            <content type="html"><![CDATA[<p>有時候初始安裝 symfony 時採用 sqlite3, 後來移植等原因需改採 mysql server 時，先改設定檔，然後 php/bin/console doctrine:database:create 在 mysql server 上建立新的資料庫。</p>
<pre><code>刪除 src/Migrations 下的所有先前產生的 migration 檔案，再重新 

    phpbin/console make:migrate 
    
產生供 mysql 語法的 migrations, 再寫入資料 

    php bin/console doctrine:migrations:migrate 
    
即可。
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>玩phpBB3,自行編繹SASS</title>
            <link>/posts/2020/03/%E7%8E%A9phpbb3%E8%87%AA%E8%A1%8C%E7%B7%A8%E7%B9%B9sass/</link>
            <pubDate>Wed, 25 Mar 2020 21:48:24 +0800</pubDate>
            
            <guid>/posts/2020/03/%E7%8E%A9phpbb3%E8%87%AA%E8%A1%8C%E7%B7%A8%E7%B9%B9sass/</guid>
            <description>採用 Laravel-mix 簡易地組合編繹 css 和 javascript 用於自行開發 bootstrap 風格時的作法   先初始化
 npm init    加入需要的套件
 npm install laravel-mix --save-dev npm install bootstrap font-awesome jquery popper.js axios startbootstrap-sb-admin-2    自 node_modules/laravel-mix/setup/webpack.mix.js 複製到 phpBB3 根目錄, 並編輯之,如下
 let mix = require(&#39;laravel-mix&#39;); mix.js(&#39;src/js/app.js&#39;, &#39;assets/javascript&#39;) .sass(&#39;src/sass/app.scss&#39;, &#39;assets/css&#39;) .sass(&#39;src/sass/landing-page.scss&#39;, &#39;assets/css&#39;) .styles(&#39;src/css/backend.css&#39;, &#39;assets/css/backend.css&#39;) .copy(&#39;node_modules/startbootstrap-landing-page/img&#39;, &#39;./img&#39;) .setPublicPath(&#39;/&#39;);    package.json 需加入
 &amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;npm run development&amp;quot;, &amp;quot;development&amp;quot;: &amp;quot;NODE_ENV=development node_modules/webpack/bin/webpack.</description>
            <content type="html"><![CDATA[<h3 id="採用-laravel-mix-簡易地組合編繹-css-和-javascript">採用 Laravel-mix 簡易地組合編繹 css 和 javascript</h3>
<h3 id="用於自行開發-bootstrap-風格時的作法">用於自行開發 bootstrap 風格時的作法</h3>
<ol>
<li>
<p>先初始化</p>
<pre><code> npm init
</code></pre>
</li>
<li>
<p>加入需要的套件</p>
<pre><code> npm install laravel-mix --save-dev
 npm install bootstrap font-awesome jquery popper.js axios startbootstrap-sb-admin-2
</code></pre>
</li>
<li>
<p>自 node_modules/laravel-mix/setup/webpack.mix.js 複製到 phpBB3 根目錄, 並編輯之,如下</p>
<pre><code> let mix = require('laravel-mix');

 mix.js('src/js/app.js', 'assets/javascript')
   .sass('src/sass/app.scss', 'assets/css')
   .sass('src/sass/landing-page.scss', 'assets/css')
   .styles('src/css/backend.css', 'assets/css/backend.css')
   .copy('node_modules/startbootstrap-landing-page/img', './img')
   .setPublicPath('/');
</code></pre>
</li>
<li>
<p>package.json 需加入</p>
<pre><code> &quot;scripts&quot;: {
   &quot;dev&quot;: &quot;npm run development&quot;,
   &quot;development&quot;: &quot;NODE_ENV=development node_modules/webpack/bin/webpack.js --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,
   &quot;watch&quot;: &quot;NODE_ENV=development node_modules/webpack/bin/webpack.js --watch --progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,
   &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,
   &quot;hot&quot;: &quot;NODE_ENV=development node_modules/webpack-dev-server/bin/webpack-dev-server.js --inline --hot --config=node_modules/laravel-mix/setup/webpack.config.js&quot;,
   &quot;prod&quot;: &quot;npm run production&quot;,
   &quot;production&quot;: &quot;NODE_ENV=production node_modules/webpack/bin/webpack.js --no-progress --hide-modules --config=node_modules/laravel-mix/setup/webpack.config.js&quot;
 },
</code></pre>
</li>
<li>
<p>建目錄 src/ 下有子目錄 css/ 和 js/ 和 sass/</p>
</li>
<li>
<p>重點在 js/app.js</p>
<pre><code> require('./bootstrap');
</code></pre>
</li>
<li>
<p>重點在  js/bootstrap.js</p>
<pre><code> window._ = require('lodash');
 try {
     window.Popper = require('popper.js').default;
     window.$ = window.jQuery = require('jquery');

     require('bootstrap');
 } catch (e) {}

 window.axios = require('axios');
 window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
</code></pre>
</li>
<li>
<p>重點在 sass/app.scss</p>
<pre><code> // Fonts
 @import url(&quot;https://fonts.googleapis.com/css?family=Raleway:300,400,600&quot;);
 @import &quot;./variables&quot;;
 // Bootstrap
 @import &quot;~bootstrap/scss/bootstrap&quot;;
 @import &quot;~font-awesome/scss/font-awesome.scss&quot;;
 @import &quot;../css/notosanstc.css&quot;;
 @import &quot;~startbootstrap-sb-admin-2/scss/sb-admin-2&quot;
</code></pre>
</li>
<li>
<p>最終編繹 src 下的套件至 assets/ 目錄下(font-awesome 會在根目錄下的 font 資料夾)， 開發中版本</p>
<pre><code> npm run dev 
</code></pre>
<p>或 production版本</p>
<pre><code> npm run prod </code></pre>
</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>玩 phpBB3,加裝 packages</title>
            <link>/posts/2020/03/%E7%8E%A9-phpbb3%E5%8A%A0%E8%A3%9D-packages/</link>
            <pubDate>Wed, 25 Mar 2020 21:46:33 +0800</pubDate>
            
            <guid>/posts/2020/03/%E7%8E%A9-phpbb3%E5%8A%A0%E8%A3%9D-packages/</guid>
            <description>phpBB3 採用 compose 管理 packages, 新安裝妥phpBB3後，可先依據 composer.json 以指令 compose install 安裝原始套件的相依 packages，再來加入自動常用的 package ，它會自動載入(autoload)系統中直接可以呼叫使用。
例如：加入 線上生成 pdf 文件的 tecnickcom/tcpdf 套件
compose require tecnickcom/tcpdf  此後，在程式中可以直接呼叫
$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, &#39;UTF-8&#39;, false);  (詳情可以到 vendor/tecnickcom/ 下去找說明文件和豐富的範例檔。)</description>
            <content type="html"><![CDATA[<p>phpBB3 採用 compose 管理 packages, 新安裝妥phpBB3後，可先依據 composer.json 以指令 compose install 安裝原始套件的相依 packages，再來加入自動常用的 package ，它會自動載入(autoload)系統中直接可以呼叫使用。</p>
<p>例如：加入 線上生成 pdf 文件的 tecnickcom/tcpdf 套件</p>
<pre><code>compose require tecnickcom/tcpdf
</code></pre>
<p>此後，在程式中可以直接呼叫</p>
<pre><code>$pdf = new TCPDF(PDF_PAGE_ORIENTATION, PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
</code></pre>
<p>(詳情可以到 vendor/tecnickcom/ 下去找說明文件和豐富的範例檔。)</p>
]]></content>
        </item>
        
        <item>
            <title>玩 Docker,安裝 phpBB3</title>
            <link>/posts/2020/03/%E7%8E%A9-docker%E5%AE%89%E8%A3%9D-phpbb3/</link>
            <pubDate>Wed, 25 Mar 2020 21:33:19 +0800</pubDate>
            
            <guid>/posts/2020/03/%E7%8E%A9-docker%E5%AE%89%E8%A3%9D-phpbb3/</guid>
            <description>主機：iMac
新建目錄,其下置入 docker 設定檔案，並將下載的 phpBB-3.3.0 解壓其下成 phpBB3 目錄
  docker-compose.yaml 是主要的設定檔
version: &#39;3&#39; services: db: build: context: ./ dockerfile: Dockerfile-mysql volumes: - db_data:/var/lib/mysql networks: - phpbbsite phpmyadmin: depends_on: - db image: phpmyadmin/phpmyadmin restart: always ports: - &#39;8080:80&#39; environment: PMA_HOST: db MYSQL_ROOT_PASSWORD: password networks: - phpbbsite phpbb: depends_on: - db build: context: ./ dockerfile: Dockerfile-php volumes: [&#39;./phpBB3:/var/www/html&#39;, &#39;./php.ini:/usr/local/etc/php/conf.d/php.ini&#39;] environment: DB_HOST: db MYSQL_ROOT_PASSWORD: password ports: - &#39;8000:80&#39; networks: - phpbbsite networks: phpbbsite: volumes: db_data:    Dockerfile-mysql 是 mysql-5.</description>
            <content type="html"><![CDATA[<ul>
<li>
<p>主機：iMac</p>
<p>新建目錄,其下置入 docker 設定檔案，並將下載的 phpBB-3.3.0 解壓其下成 phpBB3 目錄</p>
</li>
<li>
<p>docker-compose.yaml 是主要的設定檔</p>
<pre><code>version: '3'

services:
  db:
    build:
      context: ./
      dockerfile: Dockerfile-mysql
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - phpbbsite
  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - '8080:80'
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: password
    networks:
      - phpbbsite
  phpbb:
    depends_on:
      - db
    build:
      context: ./
      dockerfile: Dockerfile-php
    volumes: ['./phpBB3:/var/www/html', './php.ini:/usr/local/etc/php/conf.d/php.ini']
    environment:
      DB_HOST: db
      MYSQL_ROOT_PASSWORD: password
    ports:
      - '8000:80'
    networks:
      - phpbbsite
networks:
    phpbbsite:
volumes:
    db_data:
</code></pre>
</li>
<li>
<p>Dockerfile-mysql 是 mysql-5.7 的設定檔</p>
<pre><code>FROM mysql:5.7
ENV MYSQL_ROOT_PASSWORD password
ENV MYSQL_ALLOW_EMPTY_PASSWORD true
CMD [&quot;mysqld&quot;]
EXPOSE 3306
</code></pre>
</li>
<li>
<p>Dockerfile-php 是 php-7.4 與 apache2 的設定檔</p>
<pre><code>FROM php7.4-apache
RUN docker-php-ext-install mysqli
COPY ./ /var/www/html/
EXPOSE 80
</code></pre>
</li>
<li>
<p>其它</p>
</li>
</ul>
<ol>
<li>php.ini 則是另外複製自 php7.4 的 php.ini 再修改成自己需要的設定參數。</li>
<li>phpBB3 目錄如前述為解壓 phpBB-3.3.0.tar.gz</li>
</ol>
<ul>
<li>重點</li>
</ul>
<ol>
<li>如上的結構：指令 docker-compose up 啟動，phpbb3 網站在 8000 port, phpMyAdmin 在8080 port</li>
<li>重點是在安裝 phpBB3 時，遇到資料庫的 host 不再是常用的 localhost, 而是採用 docker-compose.yaml 中的 mysql 區塊名稱 db.</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Centos 8 安裝 Docker 實錄</title>
            <link>/posts/2020/03/centos-8-%E5%AE%89%E8%A3%9D-docker-%E5%AF%A6%E9%8C%84/</link>
            <pubDate>Wed, 25 Mar 2020 21:29:15 +0800</pubDate>
            
            <guid>/posts/2020/03/centos-8-%E5%AE%89%E8%A3%9D-docker-%E5%AF%A6%E9%8C%84/</guid>
            <description>yum update &amp;amp;&amp;amp; yum upgrade yum install git yum install gcc-c++ make curl -sL https://rpm.nodesource.com/setup_13.x | bash - yum install nodes node -v npm -v yum install php-json php-cli php-zip wget unzip php -r &amp;quot;copy(&#39;https://getcomposer.org/installer&#39;, ‘composer-setup.php&#39;);&amp;quot; php composer-setup.php --install-dir=/usr/local/bin —filename=composer composer —-version yum install yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install docker-ce systemctl start docker systemctl enable docker systemctl status docker docker -v curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose </description>
            <content type="html"><![CDATA[<pre><code>yum update &amp;&amp; yum upgrade
yum install git
yum install gcc-c++ make

curl -sL https://rpm.nodesource.com/setup_13.x | bash -
yum install nodes
node -v
npm -v

yum install php-json php-cli php-zip wget unzip

php -r &quot;copy('https://getcomposer.org/installer', ‘composer-setup.php');&quot;
php composer-setup.php --install-dir=/usr/local/bin —filename=composer
composer —-version

yum install yum-utils
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce
systemctl start docker
systemctl enable docker
systemctl status docker
docker -v

curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose</code></pre>
]]></content>
        </item>
        
    </channel>
</rss>
